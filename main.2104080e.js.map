{"version":3,"sources":["scripts/Tile.js","scripts/Matrix.js","scripts/Game.js","scripts/main.js"],"names":["Tile","x","y","value","Math","random","tileHTML","document","createElement","position","row","cell","indexArr","rowIndex","cellIndex","tile","setNewPosition","style","zIndex","render","setTimeout","remove","allTd","querySelectorAll","textContent","className","getBoundingClientRect","top","left","querySelector","append","Matrix","matrix","wasMove","maxTileValue","wasMerge","mergedTilesSum","win","addTile","updated","map","flat","filter","el","freeTiles","coordsEmptyTiles","floor","length","addTileToView","i","j","forEach","cleanMoveMerge","shift","shiftUpDown","x1","y1","x2","y2","current","moveRight","next","increment","mergeTiles","swapTiles","moveDown","merge","some","arr","Game","score","table","listenerArrows","handleArrowsButtonPressing","bind","touchStartListener","handleTouchStart","touchEndListener","handleTouchEnd","gameField","endGame","addScore","winGame","arrows","addEventListener","ev","preventDefault","firstTouch","touches","clientX","clientY","diffX","diffY","abs","moveLeft","moveUp","allChecks","includes","key","isMergePossible","classList","removeEventListener","clear","add","game","button","startMess","stop"],"mappings":"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","file":"main.2104080e.js","sourceRoot":"../src","sourcesContent":["export default class Tile {\n  constructor(x, y) {\n    this.value = Math.random() < 0.9 ? 2 : 4;\n    this.tileHTML = document.createElement('div');\n\n    this.position = {\n      row: x,\n      cell: y,\n      indexArr: x * 4 + y,\n    };\n  }\n\n  setNewPosition(rowIndex, cellIndex) {\n    this.position = {\n      row: rowIndex,\n      cell: cellIndex,\n      indexArr: rowIndex * 4 + cellIndex,\n    };\n  };\n\n  merge(tile) {\n    this.value += tile.value;\n    tile.setNewPosition(this.position.row, this.position.cell);\n    this.tileHTML.style.zIndex = '2';\n    tile.tileHTML.style.zIndex = '1';\n    tile.render();\n    setTimeout(() => tile.tileHTML.remove(), 300);\n  }\n\n  render() {\n    const allTd = document.querySelectorAll('.field-cell');\n\n    this.tileHTML.textContent = `${this.value}`;\n    this.tileHTML.className = `tile tile--${this.value}`;\n\n    // eslint-disable-next-line no-shadow\n    const { top, left } = allTd[this.position.indexArr]\n      .getBoundingClientRect();\n\n    this.tileHTML.style.top = `${top}px`;\n    this.tileHTML.style.left = `${left}px`;\n  }\n\n  addTileToView() {\n    const containerTile = document.querySelector('.tile-container');\n\n    containerTile.append(this.tileHTML);\n  }\n}\n","/* eslint-disable */\nimport Tile from './Tile';\n\nexport default class Matrix {\n  constructor() {\n    this.matrix = [\n      [null, null, null, null],\n      [null, null, null, null],\n      [null, null, null, null],\n      [null, null, null, null],\n    ];\n    this.wasMove = false;\n    this.maxTileValue = 2048;\n    this.wasMerge = false;\n    this.mergedTilesSum = 0;\n    this.win = false;\n    this.addTile();\n    this.addTile();\n    this.updated();\n  }\n\n  coordsEmptyTiles() {\n    return this.matrix.map((row,x) =>\n      row.map((cell, y) => {\n        if (cell == null) {\n          return {x: x, y: y}\n        }\n      })\n    ).flat().filter(el => el)\n  }\n\n  addTile() {\n    const freeTiles = this.coordsEmptyTiles();\n    let randomNumber = Math.floor(Math.random() * freeTiles.length)\n    let { x, y } = freeTiles[randomNumber];\n    this.matrix[x][y] = new Tile(x, y);\n    this.matrix[x][y].addTileToView();\n  }\n\n  updated() {\n    for (let i = 0; i < this.matrix.length; i++) {\n      for (let j = 0; j < this.matrix.length; j++) {\n        if (this.matrix[i][j]) {\n          this.matrix[i][j].setNewPosition(i, j);\n          this.matrix[i][j].render();\n        }\n      }\n    }\n  }\n\n  clear() {\n    this.matrix.flat().filter(el => el).forEach(tile => {\n      tile.tileHTML.remove();\n    })\n  }\n\n  moveLeft() {\n    this.cleanMoveMerge();\n    this.shift(false);\n  }\n\n  moveRight() {\n    this.cleanMoveMerge();\n    this.shift();\n  }\n\n  moveUp() {\n    this.cleanMoveMerge();\n    this.shiftUpDown(false);\n  }\n\n  moveDown() {\n    this.cleanMoveMerge();\n    this.shiftUpDown();\n  }\n\n  swapTiles(x1, y1, x2, y2) {\n    let current = this.matrix[x1][y1];\n    this.matrix[x1][y1] = this.matrix[x2][y2];\n    this.matrix[x2][y2] = current;\n    this.wasMove = true;\n  }\n\n  shift(moveRight = true) {\n    for (let i = 0; i < this.matrix.length; i++) {\n      let current = moveRight ? this.matrix.length - 1 : 0;\n      let next = moveRight ? current - 1 : 1;\n      let increment = moveRight ? -1 : 1;\n      while (next < this.matrix.length && next >= 0) {\n        if (!this.matrix[i][next]) {\n          next += increment;\n        } else {\n          if (!this.matrix[i][current]) {\n            this.swapTiles(i, current, i, next)\n            next += increment;\n          } else if (this.matrix[i][current].value === this.matrix[i][next].value) {\n            this.matrix[i][current].setNewPosition(i, current);\n            this.mergeTiles(i, next, i, current);\n            current += increment;\n            next += increment;\n          } else {\n            current += increment;\n            if (current === next) {\n              next += increment;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  shiftUpDown(moveDown = true) {\n    for (let i = 0; i < this.matrix.length; i++) {\n      let current = moveDown ? this.matrix.length - 1 : 0;\n      let next = moveDown ? current - 1 : 1;\n      let increment = moveDown ? -1 : 1;\n      while (next < this.matrix.length && next >= 0) {\n        if (!this.matrix[next][i]) {\n          next += increment;\n        } else {\n          if (!this.matrix[current][i]) {\n            this.swapTiles(current, i, next, i)\n            next += increment;\n          } else if (this.matrix[current][i].value === this.matrix[next][i].value) {\n            this.matrix[current][i].setNewPosition(current, i);\n            this.mergeTiles(next, i, current, i);\n            current += increment;\n            next += increment;\n          } else {\n            current += increment;\n            if (current === next) {\n              next += increment;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  mergeTiles(x1, y1, x2, y2) {\n    this.wasMerge = true;\n    let value = this.matrix[x1][y1].value;\n    this.mergedTilesSum += value * 2;\n    this.matrix[x2][y2].merge(this.matrix[x1][y1]);\n    this.matrix[x1][y1] = null;\n    if (this.matrix[x2][y2].value === this.maxTileValue) {\n      this.win = true;\n    }\n  }\n\n  cleanMoveMerge() {\n    this.wasMove = false;\n    this.wasMerge = false;\n  }\n\n  isMergePossible() {\n    return this.matrix.flat().some((tile, i, arr) => {\n      let value = tile.value;\n      if (((i + 1) % 4 !== 0) && value === arr[i + 1].value) {\n        return true;\n      } else if (i + 4 <= arr.length - 1 && value === arr[i + 4].value) {\n        return true;\n      } else {\n        return false;\n      }\n    })\n  }\n}\n","import Matrix from './Matrix';\n\nexport default class Game {\n  constructor() {\n    this.score = 0;\n    this.table = new Matrix();\n    this.listenerArrows = this.handleArrowsButtonPressing.bind(this);\n    this.touchStartListener = this.handleTouchStart.bind(this);\n    this.touchEndListener = this.handleTouchEnd.bind(this);\n    this.gameField = document.querySelector('.game-field');\n    this.endGame = document.querySelector('.message-lose');\n    this.addScore = document.querySelector('.game-score');\n    this.winGame = document.querySelector('.message-win');\n    this.arrows = ['ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown'];\n    document.addEventListener('keydown', this.listenerArrows);\n    this.x1 = null;\n    this.y1 = null;\n    this.gameField.addEventListener('touchstart', this.touchStartListener);\n    this.gameField.addEventListener('touchmove', this.touchEndListener);\n  }\n  handleTouchStart(ev) {\n    ev.preventDefault();\n\n    const firstTouch = ev.touches[0];\n\n    this.x1 = firstTouch.clientX;\n    this.y1 = firstTouch.clientY;\n  }\n  handleTouchEnd(ev) {\n    ev.preventDefault();\n\n    if (!this.x1 || !this.y1) {\n      return false;\n    }\n\n    const x2 = ev.touches[0].clientX;\n    const y2 = ev.touches[0].clientY;\n    const diffX = x2 - this.x1;\n    const diffY = y2 - this.y1;\n\n    if (Math.abs(diffX) > Math.abs(diffY)) {\n      if (diffX > 0) {\n        this.table.moveRight();\n      } else {\n        this.table.moveLeft();\n      }\n    } else {\n      if (diffY > 0) {\n        this.table.moveDown();\n      } else {\n        this.table.moveUp();\n      }\n    }\n    this.x1 = null;\n    this.y1 = null;\n    this.allChecks();\n  }\n\n  handleArrowsButtonPressing(ev) {\n    if (!this.arrows.includes(ev.key)) {\n      return;\n    }\n    ev.preventDefault();\n\n    switch (ev.key) {\n      case 'ArrowLeft':\n        this.table.moveLeft();\n        break;\n      case 'ArrowUp':\n        this.table.moveUp();\n        break;\n      case 'ArrowRight':\n        this.table.moveRight();\n        break;\n      case 'ArrowDown':\n        this.table.moveDown();\n        break;\n    }\n    this.allChecks();\n  }\n\n  allChecks() {\n    if (this.table.wasMove || this.table.wasMerge) {\n      this.table.addTile();\n    }\n    this.table.updated();\n\n    if (this.table.wasMerge) {\n      this.score += this.table.mergedTilesSum;\n      this.table.mergedTilesSum = 0;\n    }\n\n    this.addScore.textContent = this.score;\n\n    if (this.table.coordsEmptyTiles().length < 1\n      && !this.table.isMergePossible()) {\n      setTimeout(() => this.endGame.classList.remove('hidden'), 1000);\n    } else if (this.table.win) {\n      this.winGame.classList.remove('hidden');\n    }\n  }\n\n  stop() {\n    document.removeEventListener('keydown', this.listenerArrows);\n    this.gameField.removeEventListener('touchstart', this.touchStartListener);\n    this.gameField.removeEventListener('touchmove', this.touchEndListener);\n    this.table.clear();\n    this.endGame.classList.add('hidden');\n    this.winGame.classList.add('hidden');\n    this.score = 0;\n    this.addScore.textContent = '0';\n  }\n}\n","import Game from './Game';\n\nconst button = document.querySelector('button');\nlet game;\n\nbutton.addEventListener('click', (ev) => {\n  const startMess = document.querySelector('.message-start');\n\n  if (game) {\n    game.stop();\n  }\n  startMess.classList.add('hidden');\n  game = new Game();\n  button.classList.remove('start');\n  button.classList.add('restart');\n  button.textContent = 'Restart';\n});\n"]}